<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Forum.PostsPage">
<Super>%RegisteredObject</Super>
<TimeCreated>63782,48971.973602</TimeCreated>

<Parameter name="SERVER">
<Description>
Forum topics imported from</Description>
<Default>sql.ru</Default>
</Parameter>

<Parameter name="URL">
<Description>
part of url; Example of url: www.sql.ru/forum/{topic}</Description>
<Default>/forum/</Default>
</Parameter>

<Parameter name="PostTableBegin">
<Default><![CDATA[<!--begin threadtable-->]]></Default>
</Parameter>

<Parameter name="PostTableEnd">
<Default><![CDATA[<!--end threadtable-->]]></Default>
</Parameter>

<Parameter name="PostBegin">
<Description>
post</Description>
<Default><![CDATA[<table class="msgTable">]]></Default>
</Parameter>

<Property name="Topic">
<Description>
Topic's ExtId</Description>
<Type>%Integer</Type>
</Property>

<Property name="Amount">
<Description>
Topics's amount of pages of posts
If it is "a", it mean that we can load all posts on one page
If it is number it mean than we must only load all pages by page-to-page</Description>
<Type>%String</Type>
</Property>

<Method name="%OnNew">
<FormalSpec>topic,amount</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	s ..Topic = $g(topic)
	s ..Amount = $g(amount)
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="Url">
<Description>
Build url path for current topic
To load all pages of posts we adding "-a", that mean "all"</Description>
<CodeMode>expression</CodeMode>
<Implementation><![CDATA[..#URL_..Topic_"-"_..Amount
]]></Implementation>
</Method>

<Property name="request">
<Type>%Net.HttpRequest</Type>
<Private>1</Private>
</Property>

<Property name="Html">
<Description>
Html content of current page</Description>
<Type>%Stream</Type>
<ReadOnly>1</ReadOnly>
</Property>

<Method name="HtmlGet">
<Description>
getter</Description>
<ReturnType>%Stream</ReturnType>
<Implementation><![CDATA[
	
	Q:'$IsObject(..request) ""
	Q:'$IsObject(..request.HttpResponse) ""
	Q ..request.HttpResponse.Data
]]></Implementation>
</Method>

<Property name="pos">
<Description>
current position in content</Description>
<Type>%Integer</Type>
<Private>1</Private>
</Property>

<Method name="Get">
<Description><![CDATA[
Load page content from sql.ru/forum/<var>post</var>-a]]></Description>
<FormalSpec>topic="",amount=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	if $g(topic)'="" s ..Topic = topic
	if $g(amount)'="" s ..Amount = amount
	
	s ..request = ##class(%Net.HttpRequest).%New()
	s ..request.Server = ..#SERVER
	s sc = ..request.Get( ..Url(), , 0) Q:'sc sc
		
	Quit 1
]]></Implementation>
</Method>

<Method name="GetPage">
<Description>
Return posts page parser</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[topic:%Integer,pagesAmount,&sc]]></FormalSpec>
<ReturnType>PostsPage</ReturnType>
<Implementation><![CDATA[
	s page = ..%New(topic,pagesAmount)
	s sc = page.Get()
	Q page
]]></Implementation>
</Method>

<Method name="Parse">
<Description>
Move from topic table begin to the end of table</Description>
<FormalSpec>fromPost:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	s html = ..Html 
	d html.Rewind()
	s ..pos=0
	
	s pos = html.FindAt( 1, ..#PostTableBegin ) 
    if pos = -1 {
	    s sc = $$$ERROR(,"Not found begin of post's table") Q 0
    }
    s pos = pos + $l(..#PostTableBegin)
    
    s end = html.FindAt( pos, ..#PostTableEnd ) 
    if end = -1 {
	    s sc = $$$ERROR(,"Not found end of post's table") Q 0
    }
	
	s sc = html.MoveTo( pos ) Q:'sc ""
	
	for {
		
		s pos = html.FindAt( pos, ..#PostBegin ) Q:pos=-1
		s sc = ..postBegin( pos ) Q:'sc
		s pos = pos + $l(..#PostBegin) ;offset
		
		}
	if sc && ( ..pos < end) {
		s sc = ..postBegin( end ) ;for last topic	
	}
	
	Q sc
]]></Implementation>
</Method>

<Method name="postBegin">
<Description>
found begin of topic in html content</Description>
<FormalSpec>pos:%Integer</FormalSpec>
<Private>1</Private>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	if ..pos = 0 { ;first post begin
		s ..pos = pos
		Q 1	
	}
	
	s sc = ..Html.MoveTo( ..pos ), length = pos - ..pos 
	s postHtml = ..Html.Read( .length ) ;<table class="msgTable"><tr>....
	s ..pos = pos
	
	/* Example of post content
	<table class="msgTable">
		<tr>
			<td id="id13898084" class="messageHeader" colspan="2"><img src="/forum/images/message.gif" alt="">&nbsp;Re: Взаимодействие с InterSystems&nbsp;
			</td>
		</tr>
		<tr style="vertical-align:top">
			<td style="width:15%" class="msgBody">
				<img src="http://www.gravatar.com/avatar/7e6d4fae34f7e146f0025dcddcd4cf7c?d=mm&s=50" style="width:50px;height:50px;padding-bottom:5px"/><br/>
				<a href="http://www.sql.ru/forum/memberinfo.aspx?mid=164999">
				Шваров Евгений </a><br />
				<font style="color:#888;">Member</font><br />
				<br />
    		    <span class="smallInfo">Откуда: <br />
				Сообщений: 619<br/></span>
			</td>
			<td class="msgBody">
				<a href="https://docs.google.com/forms/d/1GeE3NnuroNZIW47WC3gaKOFiLPJdjL8VQ0mFTELOyDs/viewform" target="_blank">Записаться</a> на онлайн курс по Zen. 
			</td>
		</tr>
		<tr>
        	<td colspan="2" class="msgFooter">
        	    8 фев 13, 14:55    [<a onclick="showCopyLinks(this, '13898084')" style="text-decoration:underline; cursor:pointer; position:relative">13898084</a>] &nbsp;&nbsp;&nbsp;&nbsp;<a href="http://www.sql.ru/forum/actualpost.aspx?bid=56&amp;tid=1003258&amp;mid=13898084&amp;p=1" rel="nofollow">Ответить</a>
        	    | <a href="http://www.sql.ru/forum/actualpost.aspx?bid=56&amp;tid=1003258&amp;mid=13898084&amp;p=1&amp;act=quot" rel="nofollow">Цитировать</a> 
        	    <a href="http://www.sql.ru/forum/actualutils.aspx?action=notifymod&amp;msg=13898084" rel="nofollow">
                Сообщить модератору
        	    </a>
			</td>
		</tr>
	</table>
	<a name="13982348"></a>*/
	
	s post( "ExtId" ) = ..ParseExtId( postHtml )
	s post( "Type" ) = ..ParseType( postHtml )
	
	s sc = ..ParseAuthor( postHtml, .author ) ;complex object 
	m post( "Author" ) = author
	
	s post( "Text" ) = ..ParseText( postHtml )
	
	s post( "Posted" ) = ..ParsePosted( postHtml )
	
	Q ..OnPost( .post )
]]></Implementation>
</Method>

<Method name="ParseExtId">
<Description><![CDATA[
Extract post's id from html
<td id="id13898084" class="messageHeader" colspan="2"><img src="/forum/images/message.gif" alt="">&nbsp;Re: Взаимодействие с InterSystems&nbsp;
</td>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>post:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	s startExtId = $f(post,"<td id=""id")
	s endExtId = $f(post,""" class=""messageHeader""",startExtId),endExtId = endExtId - ($l(""" class=""messageHeader""") + 1)
	s extId = $e( post,startExtId,endExtId)	

	Q extId
]]></Implementation>
</Method>

<Method name="ParseType">
<Description><![CDATA[
Extract type from post html <var>post<var>
<td id="id13898084" class="messageHeader" colspan="2"><img src="/forum/images/message.gif" alt="">&nbsp;Re: Взаимодействие с InterSystems&nbsp;
</td>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>post:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	s startType = $f(post,"<img src=""/forum/images/")
	s endType = $f(post,".",startType),endType = endType - ($l(".") + 1)
	s type = $e( post,startType,endType)

	Q type
]]></Implementation>
</Method>

<Method name="ParseAuthor">
<Description><![CDATA[
Extract author of post from html
<td style="width:15%" class="msgBody"><img src="http://www.gravatar.com/avatar/7e6d4fae34f7e146f0025dcddcd4cf7c?d=mm&s=50" style="width:50px;height:50px;padding-bottom:5px"/><br/>
<a href="http://www.sql.ru/forum/memberinfo.aspx?mid=164999">
Шваров Евгений </a><br />
<font style="color:#888;">Member</font><br /><br /><span class="smallInfo">Откуда: <br />
	Сообщений: 619<br/></span>
	</td>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>post:%String,*author</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	k author
	s startAuthor = $f(post,"<td style=""width:15%"" class=""msgBody"">")
	s endAuthor = $f(post,"</td>",startAuthor),endAuthor = endAuthor - ($l("</td>") + 1)
	s author = $e( post,startAuthor,endAuthor)
	
	if $f( author, "<a href") { ;registered author
		
		s name = $p(author,"<a href",2)
		s name = $p(name,"</a>")
		s name = $p(name,">",2)
		s name = $zstrip( name, "<>WC" )
		
		s extId =$p(author,"?mid=",2), extId = $p(extId,""">")
		
		s author = name, author("ExtId") = extId
		
	}
	
	else { ;unregistered author

		s author = $p(author,"<")
		s author = $zstrip(author,"<>WC")
		
	}

	Q 1
]]></Implementation>
</Method>

<Method name="ParseText">
<Description><![CDATA[
Extract text of post
<td class="msgBody">
		<a href="https://docs.google.com/forms/d/1GeE3NnuroNZIW47WC3gaKOFiLPJdjL8VQ0mFTELOyDs/viewform" target="_blank">Записаться</a> на онлайн курс по Zen. 
	</td>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>post:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[

	s startText = $f(post,"<td class=""msgBody"">")
	s endText = $f(post,"<td colspan=""2"" class=""msgFooter"">",startText),endText = endText - ($l("<td colspan=""2"" class=""msgFooter"">") + 1)
	s text = $e( post,startText,endText)
	s text = $p( text, "</td>",1,*-1)
	s text = $zstrip(text,"<>WC")
	
	//s text = ..CleanText(text)
	s:$f(text,"<a href") text = ..LinksCutOut(text)
	while $f(text,"<table class='quote'>") {
		s text = ..QuoteCutOut(text)
		}
	s:$f(text,"<pre ") text = ..PreCutOut(text)
	s:$f(text,"<PRE ") text = ..PreCutOut(text,"u")
	s:$f(text,"<!--begin case_isattach-->") text = ..AttachesCutOut(text)
	s:$f(text,"http://www.sql.ru/forum/images/") text = ..ImgCutOut(text)
	s:$f(text,"<table ") text = ..SpecQuoteCutOut(text)
	
	if $l(text)>32000 s text = "!!!Text of post was cutted, because it's length more than 32000. Here is first 1000!!! "_$e(text,1,1000)
	
	Q text
]]></Implementation>
</Method>

<Method name="CleanText">
<ClassMethod>1</ClassMethod>
<FormalSpec>text:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	s text = $lfs(text,"<br />"), text = $lts(text,"")
	
	s text = $lfs(text,"<b>"), text = $lts(text,"")
	s text = $lfs(text,"</b>"), text = $lts(text,"")
	
	s text = $lfs(text,"&quot;"), text = $lts(text, """")
	
	Q text
]]></Implementation>
</Method>

<Method name="LinksCutOut">
<ClassMethod>1</ClassMethod>
<FormalSpec>text:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	s count = 0
	
	while $f(text,"<a href"){
		
		s count = count+1
		
		s startLink = $f(text,"<a href"), startLink = startLink - $l("<a href")
		s endLink = $f(text,">",startLink)
		
		s beforeLink = $e(text,1,startLink-1), afterLink = $e(text,endLink,*)
		s text = beforeLink_afterLink

		}
	
	s length = $l("</a>")
	for num = 1:1:count {
		
		s pos = $f(text,"</a>")-1
		s beforePos = $e(text,1,pos-length), afterPos = $e(text,pos+1,*)
		s text = beforePos_afterPos
		
		}
	Q text
]]></Implementation>
</Method>

<Method name="QuoteCutOut">
<ClassMethod>1</ClassMethod>
<FormalSpec>text:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	#define fQuote(%pos) $f(text,"<table class='quote'>",%pos)
	
	s startQuote = $f(text,"<table class='quote'>"), endQuote = $f(text,"</table>",startQuote), 
		embQuote = $$$fQuote(startQuote)
	
	if (embQuote'=0)&(embQuote<endQuote) s endQuote = ..EmbQuoteCutOut(text)
	
	s startQuote = startQuote - $l("<table class='quote'>")
	s beforeQuote = $e(text,1,startQuote-1), afterQuote = $e(text,endQuote,*)
	s text = beforeQuote_" !!!QUOTE!!! "_afterQuote

	Q text
]]></Implementation>
</Method>

<Method name="EmbQuoteCutOut">
<ClassMethod>1</ClassMethod>
<FormalSpec>text:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[

	#define fQuote(%pos) $f(text,"<table class='quote'>",%pos)
	
	s quotePos = 1, levelQuote = 0, endQuote = $f(text,"</table>")
	for {
		
		s:$$$fQuote(quotePos) tmpQuotePos = $$$fQuote(quotePos)
		s:'$$$fQuote(quotePos) tmpQuotePos = $l(text)+1
		
		if tmpQuotePos < endQuote {
			s levelQuote = levelQuote + 1, quotePos = tmpQuotePos
			Continue
			}
		else {
			s levelQuote = levelQuote - 1
			s:levelQuote'=0 endQuote = $f(text,"</table>",endQuote)
			Continue:levelQuote'=0
			}
		Q
		}
	Q endQuote
]]></Implementation>
</Method>

<Method name="PreCutOut">
<ClassMethod>1</ClassMethod>
<FormalSpec>text:%String,mode="l"</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	s lowerText = text
	if mode '= "l" s lowerText = $zconvert(text,"l")
	
	while $f(lowerText,"<pre "){
		
		s startPre = $f(lowerText,"<pre "), startPre = startPre - $l("<pre ")
		s endPre = $f(lowerText,"</pre>",startPre)
	
		s beforePre = $e(text,1,startPre-1), afterPre = $e(text,endPre,*)
		s text = beforePre_" !!!SOME PRE!!! "_afterPre

		s lowerText = text
		if mode '= "l" s lowerText = $zconvert(text,"l")

		}
	
	Q text
]]></Implementation>
</Method>

<Method name="AttachesCutOut">
<ClassMethod>1</ClassMethod>
<FormalSpec>text:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	while $f(text,"<!--begin case_isattach-->"){
		
		s startAttache = $f(text,"<!--begin case_isattach-->"), startAttache = startAttache - $l("<!--begin case_isattach-->")
		s endAttache = $f(text,"<!--end case_isattach-->",startAttache)
	
		s beforeAttache = $e(text,1,startAttache-1), afterAttache = $e(text,endAttache,*)
		s text = beforeAttache_" !!!ATTACHE!!! "_afterAttache

		}
	
	Q text
]]></Implementation>
</Method>

<Method name="ImgCutOut">
<ClassMethod>1</ClassMethod>
<FormalSpec>text:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[

	while $f(text,"http://www.sql.ru/forum/images/"){
		
		s startImg = $f(text,"http://www.sql.ru/forum/images/")
		s endImg = $f(text,".",startImg), 
			length = $l("."),
			typeImg = $e(text,startImg,endImg-(length+1)), 
			startImg = startImg - $l("http://www.sql.ru/forum/images/")
	
		s beforeImg = $e(text,1,startImg-1), afterImg = $e(text,endImg,*)
		s text = beforeImg_" !!!IMG!!!"_typeImg_"!!! "_afterImg

		}
	
	Q text
]]></Implementation>
</Method>

<Method name="SpecQuoteCutOut">
<ClassMethod>1</ClassMethod>
<FormalSpec>text:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	while $f(text,"<table "){
		
		s startSQ = $f(text,"<table "), startSQ = startSQ - $l("<table ")
		s endSQ = $f(text,"</table>",startSQ)
	
		s beforeSQ = $e(text,1,startSQ-1), afterSQ = $e(text,endSQ,*)
		s text = beforeSQ_" !!!SPEC.QUOTE!!! "_afterSQ

		}
	
	Q text
]]></Implementation>
</Method>

<Method name="ParsePosted">
<Description><![CDATA[
Extract date and time of post
<td colspan="2" class="msgFooter">
	8 фев 13, 14:55    [<a onclick="showCopy...]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>post:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	s startPosted = $f(post,"<td colspan=""2"" class=""msgFooter"">")
	s endPosted = $f(post,"[<a onclick",startPosted),endPosted = endPosted - ($l("[<a onclick") + 1)
	s posted= $e( post,startPosted,endPosted) ; 8 фев 13, 14:55

	s date = $p(posted,","), date = $zstrip(date, "<>WC" ) ;8 фев 13
	s time = $p(posted,",",2), time = $zstrip(time, "<>W" ) ;14:55
	
	s months = $zcvt(" Янв Фев Мар Апр Май Июн Июл Авг Сен Окт Ноя Дек", "L" )
	
	///58074 - convert as two digits from 2000-01-01
	#define 2000 58074 
	
	if $f(date, "сегодня") s date = $zd( +$h, 2, months, 3, $$$2000)
	if $f(date, "вчера") s date = $zd( $h-1, 2, months, 3, $$$2000)
	
	s dateh = $zdh( date, 2, months, 3, $$$2000 ) 
	s timeh = $zth( time )
	s ts = $zdt( dateh_","_timeh, 3 ) ;odbc timestamp
	Q ts
]]></Implementation>
</Method>

<Method name="OnPost">
<Description><![CDATA[
Event handler 
<var>post</var> - key-value array 
If handler return 0, parsing will be interrupted]]></Description>
<FormalSpec><![CDATA[&data]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	s post = ##class(Post).%New() 
	
	s exist = ##class(Topic).ExtIdExists( ..Topic, .topicId ) Q:'exist exist
	s sc = post.TopicSetObjectId( topicId ) Q:'sc sc
	
	#define g(%prop) $g(data(%prop))
	s post.ExtId = $$$g("ExtId")
	
	s post.Type = $$$g("Type")
	s post.Author = $$$g("Author")
	s post.AuthorExtId = $g(data("Author","ExtId"))
	
	s post.Text = $$$g("Text")
	s post.Posted = $$$g("Posted")
	s sc = post.%Save() 
	
	//w sc
	Q sc
]]></Implementation>
</Method>

<Method name="Scan">
<Description>
scan across all forum topic pages</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>topic:%Integer,pagesAmount:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

	if +pagesAmount = 0 { ;pagesAmount = "a"
		s page = ..GetPage( topic,pagesAmount, .sc ) Q:'sc
		s sc = page.Parse() Q:'sc sc
		}
	else{ ;pagesAmount - numeric
		s i = 0
		for {
			s i = i + 1  if i > pagesAmount Quit
			s page = ..GetPage( topic, i, .sc ) Q:'sc
			s sc = page.Parse() Q:'sc
			}
		}

	Q sc
]]></Implementation>
</Method>
</Class>
</Export>
