<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Forum.Utils">
<Description>
This class load pages as stream
Parse stream 
Carve topics and properties</Description>
<IncludeCode>statushelp</IncludeCode>
<Super>%RegisteredObject</Super>
<TimeCreated>63762,46982.907627</TimeCreated>

<Parameter name="SERVER">
<Default>www.sql.ru</Default>
</Parameter>

<Parameter name="FORUM">
<Default>/forum/cache/</Default>
</Parameter>

<Method name="PageGet">
<Description><![CDATA[
Load page number <var>num</var> as stream]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[num=1,page=..#FORUM,&sc]]></FormalSpec>
<ReturnType>%Stream</ReturnType>
<Implementation><![CDATA[
	s request = ##class(%Net.HttpRequest).%New()
	s request.Server = ..#SERVER
	s url = page_num  
	s sc = request.Get( url ,,0) Q:'sc ""
	Q request.HttpResponse.Data
]]></Implementation>
</Method>

<Method name="PagesCount">
<Description><![CDATA[
Extracting pages count from  
<var>data</var> - stream with the content of the page]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	//Where are the URL of pages is the count of pages
	#define URL  ..#SERVER_..#FORUM 
	
	s data = ..PageGet() ;data = request.HttpResponse.Data
		
	s pages = 0
	for {
		s str=data.ReadLine(,.st) 
		s hasPages = $FIND( str, $$$URL )
		if hasPages {
			s pageInfo = $piece(str,"..",2)
			s pages = +$piece(pageInfo,">",2)
			Quit  ;quit for
		}
	}
	Q pages
]]></Implementation>
</Method>

<Method name="ForumLoad">
<Description>
Load pages count
Load page from number i to pages</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	
	s pages = ..PagesCount()
	for i=1:1:pages { 
			
		s data = ..PageGet( i )	
		k table s table="" 
		s table = ..TopicTable( data, .sc )
		//d table.OutputToDevice()
		d ..TopicTableParse( table , i)
		w !, "Page #"_i_" successfully loaded.",!
	}
	
	Q
]]></Implementation>
</Method>

<Method name="TopicTable">
<Description>
Parse server response - carve table with topics </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[data:%Stream,&sc]]></FormalSpec>
<ReturnType>%Stream</ReturnType>
<Implementation><![CDATA[
	#define BEGIN "<!--begin topicstable-->"
	#define END "<!--end topicstable-->"
	
	s sc = 1
	s table = ##class(%Stream.TmpBinary).%New()
	
    s start = data.FindAt(1, $$$BEGIN) 
    if start=-1 s sc = $$$ERROR(,"Not found start") Q ""
    
    s start = start + $l($$$BEGIN)
    s stop = data.FindAt(start, $$$END) 
    if stop=-1 s sc = $$$ERROR(,"Not found end") Q ""
	
	s length = stop - start 
	s sc = data.MoveTo( start ) Q:'sc ""
	s html = data.Read( .length, .sc ) Q:sc=0
	s sc = table.Write( html ) Q:sc=0
	
	Q table
]]></Implementation>
</Method>

<Method name="TopicTableParse">
<Description>
Parse table of topics - carve topic</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>table:%Stream,pageNum:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#define BEGIN "<tr>"
	#define END "</tr>"
		
	s start = 1, stop = 1, lbegin = $l($$$BEGIN)
	for {
		
		s topic = ##class(%Stream.TmpBinary).%New()
		s start = table.FindAt(start, $$$BEGIN ) Q:start=-1	
		s start = start + lbegin
		s stop = table.FindAt(start, $$$END ) Q:start=-1
		
		s lenght = stop - start
		s sc = table.MoveTo( start )
		s topicString = table.Read( .lenght, .sc ) Q:sc=0
		s sc = topic.Write( topicString ) Q:sc=0
		d ..TopicParse( topic , pageNum)
		s start = stop
		k topic, topicString
		
	}
]]></Implementation>
</Method>

<Method name="TopicParse">
<Description>
Parse topic - carev properties, add topic.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>topic:%Stream,pageNum:%Integer</FormalSpec>
<Implementation><![CDATA[
	#define BEGIN "<td"
	#define END "</td>"
	#;ThemeTypePiece
	#define TTPiece(%str) $piece($piece(%str,"/forum/images/",2),".",1) 
	#define Piece(%str) ($piece($piece(%str,">",2),"<",1))_($piece($piece(%str,">",3),"<",1))
	
	s start = 1, stop = 1 ,propNum = 1
	
	while topic.FindAt(start, $$$BEGIN )'=-1{
		
		s start = topic.FindAt(start, $$$BEGIN ) Q:start=-1
		s stop = topic.FindAt(start, $$$END ) Q:stop=-1
		s stop = stop + $l( $$$END )
		
		s sc = topic.MoveTo( start )
		s dirtyProp = topic.Read( stop - start )		
		
		if (pageNum'=1)&($FIND(dirtyProp,"Важно:")) {
			
			s propNum = 1
			Q
			
			}

		s:propNum=1 $list(prop,propNum) = $$$TTPiece(dirtyProp)
		s:propNum'=1 $list(prop,propNum) = $$$Piece(dirtyProp)
		
		s start = stop
		s propNum = propNum + 1
		
	}
	
	if propNum>1 {
		s status=##class(Forum.Post).TopicAdd(prop)
		if $$$ISERR(status) $$$THROW("Adding theme -"_$list(prop,2)_"- failed")
		}
	
	Q
]]></Implementation>
</Method>
</Class>
</Export>
